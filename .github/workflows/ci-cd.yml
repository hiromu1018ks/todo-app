name: CI - Build and Push Docker Images to ECR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_BACKEND_URI: ${{ secrets.ECR_REPOSITORY_BACKEND_URI }} # GitHub Secret名と一致させる
  ECR_REPOSITORY_FRONTEND_URI: ${{ secrets.ECR_REPOSITORY_FRONTEND_URI }} # GitHub Secret名と一致させる
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build_and_push_backend: # ジョブ名をバックエンド処理に特化
    name: Build Backend and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.IAM_ROLE_ARN_ECR_PUSHER }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK for Backend Build
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Backend with Maven
        run: ./backend/mvnw -f backend/pom.xml clean package -DskipTests # backendディレクトリにmvnwがある前提

      - name: Build and tag Backend Docker image
        id: build-backend-image # ステップIDを修正 (ユーザー提示コードに合わせる)
        run: |
          # ECRリポジトリURI (env.ECR_REPOSITORY_BACKEND_URI) とタグ (env.IMAGE_TAG) を結合
          TARGET_IMAGE_SHA_TAG="${{ env.ECR_REPOSITORY_BACKEND_URI }}:${{ env.IMAGE_TAG }}"
          TARGET_IMAGE_LATEST_TAG="${{ env.ECR_REPOSITORY_BACKEND_URI }}:latest"

          echo "Building Docker image and tagging as $TARGET_IMAGE_SHA_TAG"
          docker build -t "$TARGET_IMAGE_SHA_TAG" ./backend # Dockerfileは backend/Dockerfile にある前提
          
          echo "Additionally tagging as $TARGET_IMAGE_LATEST_TAG"
          docker tag "$TARGET_IMAGE_SHA_TAG" "$TARGET_IMAGE_LATEST_TAG"
          
          # 次のステップで使うために出力
          echo "image_pushed_with_sha_tag=$TARGET_IMAGE_SHA_TAG" >> $GITHUB_OUTPUT
          echo "image_pushed_with_latest_tag=$TARGET_IMAGE_LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Push Backend Docker image to ECR
        run: |
          # 前のステップの出力を利用
          echo "Pushing Docker image with SHA tag: ${{ steps.build-backend-image.outputs.image_pushed_with_sha_tag }}"
          docker push "${{ steps.build-backend-image.outputs.image_pushed_with_sha_tag }}"
          
          echo "Pushing Docker image with latest tag: ${{ steps.build-backend-image.outputs.image_pushed_with_latest_tag }}"
          docker push "${{ steps.build-backend-image.outputs.image_pushed_with_latest_tag }}"

      - name: Set up Node.js for Frontend Build
        uses: actions/setup-node@v4
        with:
          node-version: '20' # frontend/package.json で推奨されるNode.jsバージョンに合わせてください
          cache: 'npm' # npmのキャッシュを有効にする (作業ディレクトリも指定するとより良い: cache-dependency-path: frontend/package-lock.json)
          cache-dependency-path: frontend/package-lock.json # frontend/package-lock.json のパス

      - name: Install Frontend Dependencies
        working-directory: ./frontend # frontendディレクトリでコマンドを実行
        run: npm ci # package-lock.json に基づいて厳密にインストール (CI環境で推奨)
        # もし npm install を使っている場合はそれでもOK

      - name: Build Frontend Application
        working-directory: ./frontend
        run: npm run build # package.json の build スクリプトを実行

      - name: Build and tag Frontend Docker image
        id: build-frontend-image
        run: |
          TARGET_IMAGE_SHA_TAG="${{ env.ECR_REPOSITORY_FRONTEND_URI }}:${{ env.IMAGE_TAG }}"
          TARGET_IMAGE_LATEST_TAG="${{ env.ECR_REPOSITORY_FRONTEND_URI }}:latest"

          echo "Building Frontend Docker image and tagging as $TARGET_IMAGE_SHA_TAG"
          # frontendディレクトリのDockerfileを指定
          docker build -t "$TARGET_IMAGE_SHA_TAG" ./frontend 
          
          echo "Additionally tagging Frontend image as $TARGET_IMAGE_LATEST_TAG"
          docker tag "$TARGET_IMAGE_SHA_TAG" "$TARGET_IMAGE_LATEST_TAG"
          
          echo "frontend_image_sha_tag=$TARGET_IMAGE_SHA_TAG" >> $GITHUB_OUTPUT
          echo "frontend_image_latest_tag=$TARGET_IMAGE_LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Push Frontend Docker image to ECR
        run: |
          echo "Pushing Frontend Docker image with SHA tag: ${{ steps.build-frontend-image.outputs.frontend_image_sha_tag }}"
          docker push "${{ steps.build-frontend-image.outputs.frontend_image_sha_tag }}"

          echo "Pushing Frontend Docker image with latest tag: ${{ steps.build-frontend-image.outputs.frontend_image_latest_tag }}"
          docker push "${{ steps.build-frontend-image.outputs.frontend_image_latest_tag }}"

      # Verify ECR Login ステップは、ECRログイン直後に移動するか、このままでも問題ありません。
      # 今回はユーザーのコードに合わせて最後に残しています。
      - name: Verify ECR Login
        if: steps.login-ecr.outputs.registry
        run: |
          echo "Successfully logged in to ECR."
          echo "ECR Registry URI: ${{ steps.login-ecr.outputs.registry }}"
